{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../utile/environement';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n  constructor(http) {\n    this.http = http;\n  }\n  post(serviceName, data) {\n    console.log(\"Sending post request ...\");\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    const options = {\n      headers,\n      withCredintials: false,\n      observe: \"response\"\n    };\n    const url = environment.apiUrl + serviceName;\n    return this.http.post(url, data, options);\n  }\n  authGet(serviceName, queryParams) {\n    console.log(\"Sending auth get request ...\");\n    // const token: string = this.storageService.loadToken();\n    const url = environment.apiUrl + serviceName;\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    // .set('Authorization', `Bearer ${token}`);\n    const options = {\n      headers,\n      withCredintials: false,\n      observe: \"response\",\n      params: queryParams\n    };\n    return this.http.get(url, options);\n  }\n  authDelete(serviceName, queryParams) {\n    console.log(\"Sending auth delete request ..\");\n    // const token: string = this.storageService.loadToken();\n    const url = environment.apiUrl + serviceName;\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    // .set('Authorization', `Bearer ${token}`);\n    const options = {\n      headers,\n      withCredintials: false,\n      observe: \"response\",\n      params: queryParams\n    };\n    return this.http.delete(url, options);\n  }\n  static #_ = this.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAoB,sBAAsB;AAC1E,SAASC,WAAW,QAAQ,uBAAuB;;;AAKnD,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAiB;IAAjB,SAAI,GAAJA,IAAI;EAEV;EAEJC,IAAI,CAACC,WAAmB,EAAEC,IAAS;IAEjCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAEvC,MAAMC,OAAO,GAAG,IAAIV,WAAW,EAAE,CAC9BW,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IAEpC,MAAMC,OAAO,GAAG;MACdF,OAAO;MACPG,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE;KACV;IACD,MAAMC,GAAG,GAAGd,WAAW,CAACe,MAAM,GAAGV,WAAW;IAE5C,OAAO,IAAI,CAACF,IAAI,CAACC,IAAI,CAACU,GAAG,EAAER,IAAI,EAAEK,OAAO,CAAC;EAC3C;EAIAK,OAAO,CAACX,WAAmB,EAAEY,WAAyB;IAEpDV,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAE3C;IACA,MAAMM,GAAG,GAAGd,WAAW,CAACe,MAAM,GAAGV,WAAW;IAC5C,MAAMI,OAAO,GAAG,IAAIV,WAAW,EAAE,CAC9BW,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IAClC;IAEF,MAAMC,OAAO,GAAG;MACdF,OAAO;MACPG,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE,UAAoB;MAC7BK,MAAM,EAAED;KACT;IAED,OAAO,IAAI,CAACd,IAAI,CAACgB,GAAG,CAACL,GAAG,EAAEH,OAAO,CAAC;EACpC;EAGAS,UAAU,CAACf,WAAmB,EAAEY,WAA0B;IAExDV,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAG7C;IACA,MAAMM,GAAG,GAAGd,WAAW,CAACe,MAAM,GAAGV,WAAW;IAC5C,MAAMI,OAAO,GAAG,IAAIV,WAAW,EAAE,CAC9BW,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IAClC;IAEF,MAAMC,OAAO,GAAG;MACdF,OAAO;MACPG,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE,UAAoB;MAC7BK,MAAM,EAAED;KACT;IAED,OAAO,IAAI,CAACd,IAAI,CAACkB,MAAM,CAACP,GAAG,EAAEH,OAAO,CAAC;EACvC;EAAC;qBAlEUV,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAqB,SAAXrB,WAAW;IAAAsB,YAFV;EAAM","names":["HttpHeaders","environment","HttpService","constructor","http","post","serviceName","data","console","log","headers","set","options","withCredintials","observe","url","apiUrl","authGet","queryParams","params","get","authDelete","delete","factory","providedIn"],"sourceRoot":"","sources":["D:\\Info3\\Design Patterns\\projet\\GestionGarderieFront\\src\\app\\services\\http.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '../utile/environement';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(\n    private http : HttpClient ,\n\n  ) { }\n\n  post(serviceName: string, data: any) {\n\n    console.log(\"Sending post request ...\")\n\n    const headers = new HttpHeaders()\n      .set('Accept', 'application/json');\n\n    const options = {\n      headers,\n      withCredintials: false,\n      observe: \"response\" as 'body'\n    };\n    const url = environment.apiUrl + serviceName;\n\n    return this.http.post(url, data, options);\n  }\n\n\n\n  authGet(serviceName: string, queryParams ?: HttpParams ) {\n\n    console.log(\"Sending auth get request ...\");\n\n    // const token: string = this.storageService.loadToken();\n    const url = environment.apiUrl + serviceName;\n    const headers = new HttpHeaders()\n      .set('Accept', 'application/json');\n      // .set('Authorization', `Bearer ${token}`);\n\n    const options = {\n      headers,\n      withCredintials: false,\n      observe: \"response\" as 'body',\n      params: queryParams\n    };\n\n    return this.http.get(url, options);\n  }\n\n\n  authDelete(serviceName: string, queryParams ? : HttpParams ) {\n\n    console.log(\"Sending auth delete request ..\")\n\n\n    // const token: string = this.storageService.loadToken();\n    const url = environment.apiUrl + serviceName;\n    const headers = new HttpHeaders()\n      .set('Accept', 'application/json');\n      // .set('Authorization', `Bearer ${token}`);\n\n    const options = {\n      headers,\n      withCredintials: false,\n      observe: \"response\" as 'body',\n      params: queryParams\n    };\n\n    return this.http.delete(url, options);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}